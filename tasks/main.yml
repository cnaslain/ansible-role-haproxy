# SPDX-FileCopyrightText: 2020 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2020 Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---
- name: Check that all mandatory variables are defined.
  assert:
    that:
      - backends is defined
      - frontend_ip is defined
    fail_msg: "Some mandatory variables are not set."
    success_msg: "All mandatory variables are set."
  when: haproxy_config_template == "haproxy.cfg.j2"

- name: Enable ip_forward.
  become: yes
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    sysctl_set: yes
    reload: yes

- name: Enable ip_nonlocal_bind.
  become: yes
  sysctl:
    name: net.ipv4.ip_nonlocal_bind
    value: '1'
    state: present
    sysctl_set: yes
    reload: yes

- name: Install dependencies of HAProxy.
  become: yes
  package:
    name: "{{ haproxy_dependencies }}"
    state: present
    update_cache: yes

- name: Add PPA for HAProxy
  become: yes
  apt_repository:
    repo: "{{ haproxy_ppa_version }}"
    state: present
    validate_certs: yes
    mode: '0644'

- name: Check whether wildcard character is contained in version string.
  set_fact:
    version_contains_wildcard: "{{ '*' in haproxy_version }}"

- name: Check whether HAProxy binary is installed.
  stat:
    path: "{{ haproxy_executable_path }}"
  register: haproxy_installed

- name: Check currently installed HAProxy version
  when: "not version_contains_wildcard and haproxy_installed.stat.exists"
  block:
    - name: Get HAProxy version.
      command:
        cmd: "{{ haproxy_executable_path }} -v"
      register: haproxy_version_installed
      changed_when: false
      check_mode: no

    - name: Extract installed and target HAProxy versions.
      set_fact:
        installed_semantic_haproxy_version: "{{ haproxy_version_installed |
                                                regex_search('HA-Proxy version (\\d+\\.\\d+\\.\\d+)', '\\1') |
                                                default([None], True) |
                                                first }}"
        target_semantic_haproxy_version: "{{ haproxy_version |
                                             regex_search('^(\\d+\\.\\d+\\.\\d+)', '\\1') |
                                             default([None], True) |
                                             first }}"

- name: Install or upgrade "haproxy" package.
  become: yes
  package:
    name: "{{ haproxy_name }}={{ haproxy_version }}"
    update_cache: yes
  when: "version_contains_wildcard or
         not haproxy_installed.stat.exists or
         installed_semantic_haproxy_version is version(target_semantic_haproxy_version, operator='lt', strict=True)"

- name: Create HAProxy Configuration Directory.
  become: yes
  file:
    path: "{{ haproxy_conf_dir }}"
    state: directory
    owner: "{{ haproxy_user }}"
    group: "{{ haproxy_group }}"
    mode: '0755'

- name: Create HAProxy Configuration File.
  become: yes
  template:
    src: "{{ haproxy_config_template }}"
    dest: "{{ haproxy_conf_file_path }}"
    owner: "{{ haproxy_user }}"
    group: "{{ haproxy_group }}"
    mode: '0644'
  notify: Reload HAProxy

- name: Generate self-signed TLS certificate
  when: haproxy_create_self_signed_cert | bool
  block:
    - name: Create HAProxy SSL Directory.
      become: yes
      file:
        path: "{{ haproxy_ssl_certificate_dir }}"
        state: directory
        owner: "{{ haproxy_user }}"
        group: "{{ haproxy_group }}"
        mode: '0755'

    - name: Generate an OpenSSL Private Key (4096 bits)
      become: yes
      openssl_privatekey:
        path: "{{ haproxy_ssl_certificate_key_file }}"
        size: '4096'
        type: 'RSA'

    - name: Generate an OpenSSL Certificate Signing Request
      become: yes
      openssl_csr:
        path: "{{ haproxy_ssl_certificate_csr_file }}"
        privatekey_path: "{{ haproxy_ssl_certificate_key_file }}"
        country_name: "{{ haproxy_country_name }}"
        state_or_province_name: "{{ haproxy_state_or_province_name }}"
        locality_name: "{{ haproxy_locality_name }}"
        organization_name: "{{ haproxy_organization_name }}"
        organizational_unit_name: "{{ haproxy_organizational_unit_name }}"
        email_address: "{{ haproxy_email_address }}"
        common_name: "{{ haproxy_common_name }}"

    - name: Generate a Self Signed OpenSSL certificate
      become: yes
      openssl_certificate:
        path: "{{ haproxy_ssl_certificate_crt_file }}"
        privatekey_path: "{{ haproxy_ssl_certificate_key_file }}"
        csr_path: "{{ haproxy_ssl_certificate_csr_file }}"
        provider: 'selfsigned'

    - name: Generate PKCS12 file
      become: yes
      openssl_pkcs12:
        action: export
        path: "{{ haproxy_ssl_certificate_pkcs12_file }}"
        certificate_path: "{{ haproxy_ssl_certificate_crt_file }}"
        privatekey_path: "{{ haproxy_ssl_certificate_key_file }}"
        state: present
        friendly_name: 'pkcs12_file'
      notify: Reload HAProxy

    - name: Parse PKCS12 file
      become: yes
      openssl_pkcs12:
        action: parse
        src: "{{ haproxy_ssl_certificate_pkcs12_file }}"
        path: "{{ haproxy_ssl_certificate_chain_file }}"
        state: present
        mode: '0640'
        owner: 'root'
        group: "{{ haproxy_group }}"
      notify: Reload HAProxy

- name: Generate DH Parameter file
  become: yes
  openssl_dhparam:
    path: "{{ haproxy_ssl_dhparam_file }}"
    size: "{{ haproxy_ssl_dhparam_size }}"
    mode: '0640'
    owner: 'root'
    group: "{{ haproxy_group }}"
  notify: Reload HAProxy

...
